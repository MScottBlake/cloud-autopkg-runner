name: Integration Tests

on:
  push:
    branches:
      - integration-tests
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read

jobs:
  lock_file:
    name: ðŸ§· Prepare Locked Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - run: uv lock --locked


  # s3_integration_tests:
  #   name: "ðŸ§ª Integration Test: S3 Emulator (Python ${{ matrix.python-version }})"
  #   runs-on: ubuntu-latest
  #   needs: [lock_file]
  #   timeout-minutes: 10
  #   strategy:
  #     fail-fast: false # Allows all matrix jobs to run even if one fails
  #     matrix:
  #       # python-version: ["3.10", "3.13"]
  #       python-version: ["3.13"]
  #       include:
  #         - cloud_provider: s3
  #           install_extras: s3
  #           test_path: tests/integration/test_s3_cache.py
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         enable-cache: true

  #     - name: Start LocalStack
  #       if: matrix.cloud_provider == 's3'
  #       uses: LocalStack/setup-localstack@v0.2.4
  #       with:
  #         image-tag: 'latest'
  #         install-awslocal: false

  #     - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
  #       env:
  #         AWS_ENDPOINT_URL: http://localhost:4566
  #         AWS_ACCESS_KEY_ID: test
  #         AWS_SECRET_ACCESS_KEY: test
  #         AWS_DEFAULT_REGION: us-east-1
  #       run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov


  # azure_integration_tests:
  #   name: "ðŸ§ª Integration Test: Azure Emulator (Python ${{ matrix.python-version }})"
  #   runs-on: ubuntu-latest
  #   needs: [lock_file]
  #   timeout-minutes: 10
  #   strategy:
  #     fail-fast: false # Allows all matrix jobs to run even if one fails
  #     matrix:
  #       # python-version: ["3.10", "3.13"]
  #       python-version: ["3.13"]
  #       include:
  #         - cloud_provider: azure
  #           install_extras: azure
  #           test_path: tests/integration/test_azure_cache.py
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         enable-cache: true

  #     - name: Download mkcert
  #       run: |
  #         curl -Ls "https://dl.filippo.io/mkcert/latest?for=linux/amd64" -o mkcert
  #         chmod +x mkcert
  #         sudo mv mkcert /usr/local/bin/

  #     - name: Create local CA
  #       run: mkcert -install

  #     - name: Generate HTTPS cert for Azurite
  #       run: mkcert 127.0.0.1

  #     - name: Install Azurite
  #       run: npm install -g azurite

  #     - name: Start Azurite
  #       run: |
  #         azurite --oauth basic --cert 127.0.0.1.pem --key 127.0.0.1-key.pem --silent &

  #         for i in {1..30}; do
  #           if curl -ks https://127.0.0.1:10000/devstoreaccount1; then
  #             echo "Azurite is ready"
  #             break
  #           fi
  #           sleep 1
  #         done

  #     - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
  #       env:
  #         AZURE_ACCOUNT_URL: https://127.0.0.1:10000/devstoreaccount1
  #         # AZURE_ACCOUNT_URL: https://cloudautopkgrunner.blob.core.windows.net/cloudautopkgrunner
  #         AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #         AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #         AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #       run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov


  gcs_integration_tests:
    name: "ðŸ§ª Integration Test: GCS Emulator (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: [lock_file]
    timeout-minutes: 10
    strategy:
      fail-fast: false # Allows all matrix jobs to run even if one fails
      matrix:
        # python-version: ["3.10", "3.13"]
        python-version: ["3.13"]
        include:
          - cloud_provider: gcs
            install_extras: gcs
            test_path: tests/integration/test_gcs_cache.py

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Start Fake GCS Server
        uses: fsouza/fake-gcs-action@v0.4.1
        with:
          # version: "1.37.2"
          backend: memory
          # data: testdata
          public-host: "storage.gcs.127.0.0.1.nip.io:4443"
          external-url: "http://storage.gcs.127.0.0.1.nip.io:4443"
          scheme: http

      # - name: Configure GCS SDK for Emulator
      #   run: |
      #     # GCS_EMULATOR_HOST makes the google-cloud-storage client talk to the emulator
      #     echo "GCS_EMULATOR_HOST=http://gcs_emulator:9000" >> $GITHUB_ENV
      #     # Set a dummy project ID as it might be required by the SDK even for emulators
      #     echo "GOOGLE_CLOUD_PROJECT=test-project" >> $GITHUB_ENV
      #   shell: bash

      # --- Wait for Emulators (Crucial for Reliability) ---
      # Although services health checks are used, sometimes a short wait is still beneficial
      # especially if an emulator takes a moment to fully initialize its API routes.

      # - name: Wait for GCS emulator to be fully ready
      #   if: matrix.cloud_provider == 'gcs'
      #   run: |
      #     curl -f http://gcs_emulator:9000/storage/v1/b || exit 1
      #   timeout-minutes: 1
      #   shell: bash

      - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
        env:
          GCS_EMULATOR_HOST: http://storage.gcs.127.0.0.1.nip.io:4443
          PROJECT: cloud-autopkg-runner
        run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov
