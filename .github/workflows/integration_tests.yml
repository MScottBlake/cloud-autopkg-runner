name: Integration Tests

on:
  push:
    branches:
      - integration-tests
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read

jobs:
  lock_file:
    name: ðŸ§· Prepare Locked Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - run: uv lock --locked


  # s3_integration_tests:
  #   name: "ðŸ§ª Integration Test: S3 Emulator (Python ${{ matrix.python-version }})"
  #   runs-on: ubuntu-latest
  #   needs: [lock_file]
  #   timeout-minutes: 3
  #   strategy:
  #     fail-fast: false # Allows all matrix jobs to run even if one fails
  #     matrix:
  #       # python-version: ["3.10", "3.13"]
  #       python-version: ["3.13"]
  #       include:
  #         - cloud_provider: s3
  #           install_extras: s3
  #           test_path: tests/integration/test_s3_cache.py
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         enable-cache: true

  #     - name: Start LocalStack
  #       if: matrix.cloud_provider == 's3'
  #       uses: LocalStack/setup-localstack@v0.2.4
  #       with:
  #         image-tag: 'latest'
  #         install-awslocal: false

  #     - name: Configure AWS SDK for LocalStack
  #       if: matrix.cloud_provider == 's3'
  #       run: |
  #         echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV
  #         echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
  #         echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
  #         echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
  #       run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov

  azure_integration_tests:
    name: "ðŸ§ª Integration Test: Azure Emulator (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: [lock_file]
    timeout-minutes: 10
    strategy:
      fail-fast: false # Allows all matrix jobs to run even if one fails
      matrix:
        # python-version: ["3.10", "3.13"]
        python-version: ["3.13"]
        include:
          - cloud_provider: azure
            install_extras: azure
            test_path: tests/integration/test_azure_cache.py
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install mkcert and Azurite
        run: |
          npm install -g mkcert azurite

      - name: Create server certificates
        run: |
          mkcert create-ca
          mkcert create-cert

      - name: Start Azurite
        run: |
          nohup azurite --oauth basic --cert cert.crt --key cert.key --silent --loose --disableProductStyleUrl &

          for i in {1..30}; do
            if curl -k -s https://127.0.0.1:10000/devstoreaccount1; then
              echo "Azurite is ready"
              break
            fi
            sleep 2
          done

      # - name: Configure Azure SDK for Azurite
      #   run: |
      #     # The default connection string for Azurite running in a Docker container
      #     echo "AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBhgCzFETQlEqw==;BlobEndpoint=https://localhost:10000/devstoreaccount1;" >> $GITHUB_ENV

      #     echo "AZURE_STORAGE_HOST=127.0.0.1:10000" >> $GITHUB_ENV
      #     echo "AZURE_STORAGE_ACCOUNT=devstoreaccount1" >> $GITHUB_ENV

      #     # echo "AZURE_AUTHORITY_HOST=https://login.microsoftonline.com" >> $GITHUB_ENV
      #     # echo "AZURE_USERNAME=username@localhost" >> $GITHUB_ENV
      #     # This tells DefaultAzureCredential to use EnvironmentCredential >> $GITHUB_ENV
      #     echo "AZURE_IDENTITY_DISABLE_INSTANCE_DISCOVERY=true" >> $GITHUB_ENV
      #   shell: bash

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
        env:
          AZURE_STORAGE_HOST: 127.0.0.1:10000
          AZURE_STORAGE_ACCOUNT: devstoreaccount1
        run: uv run --extra ${{ matrix.install_extras }} pytest ${{ matrix.test_path }} --no-cov

  # gcs_integration_tests:
  #   name: "ðŸ§ª Integration Test: Azure Emulator (Python ${{ matrix.python-version }})"
  #   runs-on: ubuntu-latest
  #   needs: [lock_file]
  #   timeout-minutes: 10
  #   strategy:
  #     fail-fast: false # Allows all matrix jobs to run even if one fails
  #     matrix:
  #       # python-version: ["3.10", "3.13"]
  #       python-version: ["3.13"]
  #       include:
  #         - cloud_provider: azure
  #           install_extras: azure
  #           test_path: tests/integration/test_azure_cache.py
  #           emulator_service: azurite

  #         # - cloud_provider: gcs
  #         #   install_extras: gcs
  #         #   test_path: tests/integration/test_gcs_cache.py
  #         #   emulator_service: gcs_emulator

  #   # Define the emulator services for each job. GitHub Actions will start these Docker containers.
  #   services:
  #     azurite:
  #       image: mcr.microsoft.com/azure-storage/azurite:latest
  #       ports:
  #         - 10000:10000 # Blob storage
  #         # - 10001:10001 # Queue storage
  #         # - 10002:10002 # Table storage
  #       options: >-
  #         --health-cmd "ls /usr/local/bin/azurite-blob"
  #         --health-interval 5s
  #         --health-timeout 5s
  #         --health-retries 10

  #     # gcs_emulator:
  #     #   image: fsouza/fake-gcs-server:latest
  #     #   ports:
  #     #     - 9000:9000
  #     #   options: >-
  #     #     --health-cmd "curl -f http://localhost:9000/storage/v1/b || exit 1"
  #     #     --health-interval 5s
  #     #     --health-timeout 5s
  #     #     --health-retries 10
  #     #     -scheme http -host 0.0.0.0 -backend memory # Or -backend filesystem /tmp/gcsdata for persistence if needed.

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         enable-cache: true

  #     # --- Emulator Specific Setup & Environment Variables ---

  #     - name: Start LocalStack
  #       if: matrix.cloud_provider == 's3'
  #       uses: LocalStack/setup-localstack@v0.2.4
  #       with:
  #         image-tag: 'latest'
  #         install-awslocal: false

  #     - name: Configure AWS SDK for LocalStack
  #       if: matrix.cloud_provider == 's3'
  #       run: |
  #         echo "AWS_ENDPOINT_URL=http://localstack:4566" >> $GITHUB_ENV
  #         echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
  #         echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
  #         echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Configure Azure SDK for Azurite
  #       if: matrix.cloud_provider == 'azure'
  #       run: |
  #         # The default connection string for Azurite running in a Docker container
  #         echo "AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBhgCzFETQlEqw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;" >> $GITHUB_ENV
  #       shell: bash

  #     # - name: Configure GCS SDK for Emulator
  #     #   if: matrix.cloud_provider == 'gcs'
  #     #   run: |
  #     #     # GCS_EMULATOR_HOST makes the google-cloud-storage client talk to the emulator
  #     #     echo "GCS_EMULATOR_HOST=http://gcs_emulator:9000" >> $GITHUB_ENV
  #     #     # Set a dummy project ID as it might be required by the SDK even for emulators
  #     #     echo "GOOGLE_CLOUD_PROJECT=test-project" >> $GITHUB_ENV
  #     #   shell: bash

  #     # --- Wait for Emulators (Crucial for Reliability) ---
  #     # Although services health checks are used, sometimes a short wait is still beneficial
  #     # especially if an emulator takes a moment to fully initialize its API routes.

  #     # - name: Wait for GCS emulator to be fully ready
  #     #   if: matrix.cloud_provider == 'gcs'
  #     #   run: |
  #     #     curl -f http://gcs_emulator:9000/storage/v1/b || exit 1
  #     #   timeout-minutes: 1
  #     #   shell: bash

  #     - name: Run Pytest for ${{ matrix.cloud_provider }} Cache
  #       run: uv run --all-extras pytest ${{ matrix.test_path }} --no-cov
