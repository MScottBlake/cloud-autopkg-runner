name: Release Stable to PyPI

on:
  pull_request_target:
    types:
      - closed
    branches:
      - 'release/v**'

jobs:
  create-tag:
    if: github.event.pull_request.merged == true
    name: Create Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating and pushing tags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Read Current Version
        id: current_version
        run: |
          echo "CURRENT_VERSION=$(uv version --short)" >> "${GITHUB_OUTPUT}"
          # # Output a boolean flag if it's a stable version (no dev, alpha, beta, rc suffixes)
          # if [[ "${CURRENT_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          #   echo "IS_STABLE_VERSION=true" >> "${GITHUB_OUTPUT}"
          # else
          #   echo "IS_STABLE_VERSION=false" >> "${GITHUB_OUTPUT}"
          # fi

      # - name: Create and Push Git Tag
      #   run: |
      #     VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
      #     TAG_NAME="v${VERSION}"
      #     echo "Checking for existing tag ${TAG_NAME}..."
      #     git fetch --tags  # Ensure local tags are up-to-date
      #     if git rev-parse "${TAG_NAME}" >/dev/null 2>&1; then
      #         echo "Tag ${TAG_NAME} already exists. Skipping tag creation."
      #     else
      #         git tag "${TAG_NAME}" -m "Release v${VERSION}"
      #         git push origin "${TAG_NAME}"
      #     fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.current_version.outputs.CURRENT_VERSION }}"
          name: "Release v${{ steps.current_version.outputs.CURRENT_VERSION }}"
          generate_release_notes: true
          append_body: |
            ## Release Notes v${{ steps.current_version.outputs.CURRENT_VERSION }}
            Automated release initiated by ${{ github.actor }} from commit ${{ github.sha }}.
          draft: false
          prerelease: false


  # publish-to-testpypi:
  #   name: Publish to TestPyPI
  #   runs-on: ubuntu-latest
  #   needs: [create-tag]
  #   environment:
  #     name: TestPyPi
  #     url: https://test.pypi.org/p/cloud-autopkg-runner
  #   # Only run if we are on a stable version
  #   if: needs.create-tag.outputs.IS_STABLE_VERSION == 'true' && success()
  #   permissions:
  #     id-token: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup uv
  #       uses: astral-sh/setup-uv@v5

  #     - name: Build
  #       run: uv build

  #     - name: Publish
  #       run: uv publish --index testpypi --trusted-publishing always


  publish-to-pypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [create-tag, publish-to-testpypi]
    environment:
      name: PyPi
      url: https://pypi.org/p/cloud-autopkg-runner
    # Only run if we are on a stable version
    if: needs.create-tag.outputs.IS_STABLE_VERSION == 'true' && success()
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Build
        run: uv build

      - name: Publish
        run: uv publish --index pypi --trusted-publishing always


  # install-library-from-testpypi:
  #   name: Test Installation from TestPyPI
  #   runs-on: ubuntu-latest
  #   needs: [publish-to-testpypi]
  #   # Only run if a stable version was published to TestPyPI
  #   if: needs.create-tag.outputs.IS_STABLE_VERSION == 'true' && success()
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup uv
  #       uses: astral-sh/setup-uv@v5

  #     - name: Install
  #       run: uv run --with cloud-autopkg-runner --extra-index-url https://test.pypi.org/simple/ --index-strategy unsafe-best-match --no-project -- python -c "import cloud_autopkg_runner"


  install-library-from-pypi:
    name: Install from PyPI
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    # Only run if a stable version was published to PyPI
    if: needs.create-tag.outputs.IS_STABLE_VERSION == 'true' && success()
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Verify Installation
        run: uv run --with cloud-autopkg-runner --no-project -- python -c "import cloud_autopkg_runner"


  bump-dev-version:
    name: Bump Dev Version for Next Development Cycle
    runs-on: ubuntu-latest
    needs: [create-tag, publish-to-pypi]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump Version to Dev
        id: new_dev_version
        run: |
          # This will bump the stable version (e.g., 1.0.0) to a new patch + dev (e.g., 1.0.1.dev0)
          uv version --bump patch --bump dev
          echo "NEW_VERSION=$(uv version --short)" >> "${GITHUB_OUTPUT}"

      - name: Commit Dev Version Change
        run: |
          git checkout -b dev
          git add pyproject.toml uv.lock
          git commit -m "chore(dev): Bump version to ${{ steps.new_dev_version.outputs.NEW_VERSION }} for next development cycle" || echo "No changes to commit"
          git push origin dev
