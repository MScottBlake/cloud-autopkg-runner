name: Release Stable to PyPI

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Type of version bump (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prepare-release:
    name: Prepare Release (Bump Version & Create GitHub Release)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch_depth: 0

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Configure Git
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Bump Version using uv
        id: new_stable_version
        run: |
          if [ "${{ github.event.inputs.bump_type }}" == "patch" ]; then
            uv version --bump stable
          else
            uv version --bump "${{ github.event.inputs.bump_type }}"
          fi
          echo "NEW_VERSION=$(uv version --short)" >> "$GITHUB_OUTPUT"

      - name: Commit Version Change
        run: |
          git add pyproject.toml uv.lock
          git commit -m "chore(release): Release v${{ steps.new_stable_version.outputs.NEW_VERSION }}"
          git tag "v${{ steps.new_stable_version.outputs.NEW_VERSION }}"
          git push origin main
          git push origin "v${{ steps.new_stable_version.outputs.NEW_VERSION }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: "v${{ steps.new_stable_version.outputs.NEW_VERSION }}"
          name: "Release v${{ steps.new_stable_version.outputs.NEW_VERSION }}"
          generate_release_notes: true
          append_body: |
            ## Release Notes v${{ steps.new_stable_version.outputs.NEW_VERSION }}
            Automated release initiated by ${{ github.actor }} from commit ${{ github.sha }}.
          draft: false
          prerelease: false

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: success() && startsWith(github.ref, 'refs/tags/')
    environment:
      name: PyPi
      url: https://pypi.org/p/cloud-autopkg-runner
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Build
        run: uv build

      - name: Publish
        run: uv publish --trusted-publishing always

  install-library-from-pypi:
    name: Install from PyPI
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Verify Installation
        run: uv run --with cloud-autopkg-runner --no-project -- python -c "import cloud_autopkg_runner"

  bump-dev-version:
    name: Bump Dev Version & Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5

      - name: Configure Git
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

      - name: Bump Version using uv
        id: new_dev_version
        run: |
          uv version --bump patch --bump dev
          echo "NEW_VERSION=$(uv version --short)" >> "$GITHUB_OUTPUT"

      - name: Commit Version Change
        run: |
          git add pyproject.toml uv.lock
          git commit -m "chore(patch): Bump version to ${{ steps.new_dev_version.outputs.NEW_VERSION }}"
          git push origin main
